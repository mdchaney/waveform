waveform

Copyright 2014, 2015 Michael Chaney Consulting Corporation, all rights reserved

Released under the terms of the MIT or GPLv2 license.

This is a simple C program that will create a "wave form" of an AIFF or
WAVE file.  It is optimized for speed in probably the best way possible
on a modern CPU architecture: minimum of branching inside of loops.
That means that I have entire chunks of code copied verbatim except for
a few different lines of code to handle the dirty work of computing the
numbers.  The inner processing loops contain no branching unless there
is absolutely no other way to accomplish the computation.

The program is called like this:

waveform [--mean|--peak|--rms] [--mono] [--points x] [--scale y] [filename]

The program will output a set of integers (number specified by "points
parameter, default of 1000), one or two on each line (comma separated
for two numbers) that vary from "0" to "scale", inclusive (defaults to
"255").  The numbers represent the result of a set of sample points run
through an algorithm.

Let's say we have a WAVE file that is 3 minutes long at CD quality of
44100 samples per second.  There are 7,938,000 samples in the file.  At
1000 points there would be 7938 samples interpolated for each output
point.

1. "mean", "peak", and "rms" are three interpolation algorithms.  Choose
one, default is rms.

2. --mono will cause a 2 channel file to output only a single integer
per line representing an interpolation of both channels.

3. --points tells how many numbers to output

4. --scale will determine the scale of the output integers.  Note that
it is inclusive, so a scale of "255" will possibly include output
integers from "0" to "255" inclusive.

5. waveform accepts either a filename on the command line or it'll read
stdin.  It can be used as a pipe filter.

6. Use --raw to read raw PCM data and create a waveform from the data
set.  Here's how it is used:

% lame --silent --decode -t great_song.mp3 - | waveform --raw --peak --points 1000 --scale 255

That will use lame to decode to raw pcm and then waveform to read it and
make a wave form.  Unfortunately we have to use the "-t" flag with lame
in order to generate raw PCM data.  It can generate a WAVE file but
there are two problems: 1) it's in whatever endianness the current
processor uses meaning it'll be wrong on a big-endian machine and
require yet another flag to fix it and 2) the sizes in the RIFF header
and the data chunk header are set to gibberish - both are huge negative
numbers.

Using "--raw" with waveform makes it assume 16-bit samples, same
endianness as the current machine, and stereo samples.  The code for
reading the data is quite efficient and will read the entire data set
into memory while only requiring one extra buffer to hold enough samples
for one output data point.  On modern hardware that should be fine.

SUPPORTED FILE FORMATS:

AIFF and WAV
Apple AIFC with "sowt" compression (regular PCM in little-endian format)

8, 16 or 24 bit samples (Adding support for 32-bit samples is easy)

1 or 2 channel

It would be possible to simplify the code dramatically and have one main
processing loop.  However, such code would have a lot of branches inside
the main loop which would slow it down, although I haven't played with
it to see what impact it would have.  My goal on this project is raw
speed at the expense of everything else - I don't mind if I have code
that is replicated save for a few minor differences.

NOTE:

This should work on big-endian machines but I haven't tested it on one.

There is a lot of 64-bit math in here, it will run slower on a 32-bit
processor.
